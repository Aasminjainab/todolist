pipeline {
    agent { label 'docker-agent-label' } // Ensure this matches your Jenkins agent label

    environment {
        AWS_ACCOUNT_ID = '418272779533'
        AWS_REGION = 'ap-south-1'
        EC2_USER = 'ubuntu'
        EC2_HOST = '13.201.53.55'
        APP_DIR = '/home/ubuntu/jenkins/jenkins/workspace/todo-list_main' // ‚úÖ Corrected App Directory
        ECR_URI = "418272779533.dkr.ecr.ap-south-1.amazonaws.com/aasmin"   // ‚úÖ AWS ECR Repository URI
        PYTHON_BIN = '/usr/bin/python3'  // ‚úÖ Python binary
    }


    stages {
        // üü¢ Clone the Repository
        stage('Clone TO-DO Repository') {
            steps {

                withCredentials([usernamePassword(credentialsId: 'aasmin', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    sh '''
                    echo "Checking if repository already exists..."
                    if [ -d "todolist/.git" ]; then
                        echo "Repository exists. Pulling latest changes..."
                        cd todolist
                        git remote set-url origin https://$GIT_USER:$GIT_PASS@github.com/Aasminjainab/todolist.git
                        git fetch origin main
                        git reset --hard origin/main
                        git pull origin main
                    else
                        echo "Cloning TO-DO LIST repository..."
                        git clone -b main https://$GIT_USER:$GIT_PASS@github.com/Aasminjainab/todolist.git
                    fi
                    '''
                }
            }
        }

        // üü¢ Run Pylint Checks
        stage('Run Pylint Checks') {
            steps {
                sh '''
                echo "Running Pylint Checks..."
                cd todolist
                if [ -f pylint.sh ]; then
                    chmod +x pylint.sh
                    ./pylint.sh | tee pylint.log || echo "‚ö†Ô∏è Pylint warnings found, review pylint.log."
                else
                    echo "‚ùå pylint.sh not found in todolist. Check file path."
                    exit 1
                fi
                '''
            }
        }

        // üü¢ Build Docker Image
        stage('Build Docker Image') {
            steps {
                sh '''
                echo "Building Docker Image..."
                cd todolist
                export DOCKER_BUILDKIT=0  # ‚ùóÔ∏è Disable BuildKit temporarily
                docker build --no-cache -t todo-app -f Dockerfile .
                '''
            }
        }

        // üü¢ Fix Docker Permission Issue
        stage('Fix Docker Permissions') {
            steps {
                sh '''
                echo "Ensuring Docker permissions are correct..."
                sudo usermod -aG docker $USER || echo "User already part of docker group"
                sudo chmod 666 /var/run/docker.sock
                '''
            }
        }

        // üü¢ Login to AWS ECR
        stage('Login to AWS ECR') {
            steps {
                    withCredentials([aws(credentialsId: 'aws-credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    echo "Logging into AWS ECR..."
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI
                    '''
                }
            }
        }

        // üü¢ Push Docker Image to ECR
        stage('Push Docker Image to ECR') {
            steps {
                sh '''
                echo "Tagging Docker Image..."
                docker tag todo-app $ECR_URI:latest

                echo "Pushing Docker Image to AWS ECR..."
                docker push $ECR_URI:latest
                '''
            }
        }

        // üü¢ Deploy to EC2
        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ubuntu', keyFileVariable: 'SSH_KEY')]) {  // ‚úÖ Updated SSH Agent ID
                    sh '''
                    echo "Deploying on EC2..."
                    ssh -tt -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST bash -c "
                    set -e
                    cd $APP_DIR

                    echo 'Checking for existing container...'
                    docker ps -q --filter 'name=todo-container' | grep -q . && docker stop todo-container && docker rm -f todo-container || echo 'No running container found.'

                    echo 'Checking for processes using port 8000...'
                    sudo lsof -ti:8000 | xargs -r sudo kill -9 || echo 'No process found on port 8000.'

                    echo 'Pulling latest image from ECR...'
                    docker pull $ECR_URI:latest

                    echo 'Running new container...'
                    docker run -d --restart=always -p 8000:8000 --name todo-container $ECR_URI:latest
                    "
                    '''
                }
            }
        }
    }
}
