pipeline {
    agent { label 'docker-agent-label' }

    environment {
        AWS_ACCOUNT_ID = '043309327282'
        AWS_REGION = 'ap-south-1'
        EC2_USER = 'ubuntu'
        EC2_HOST = '35.154.250.112'
        APP_DIR = '/home/ubuntu/todo-app/to-do-list-practise-main'
        VENV_DIR = '/home/ubuntu/todo-app/to-do-list-practise-main/venv'
        GIT_REPO = 'https://github.com/Aasminjainab/todolist.git'
        ECR_REPO = '043309327282.dkr.ecr.ap-south-1.amazonaws.com/todo/app'
        DOCKER_IMAGE = 'todo-app'
        DOCKER_TAG = 'latest'
    }




    stages {
        stage('Setup Environment') {
            steps {
                sh '''
                    echo "Checking and Installing AWS CLI and Docker..."

                    # Check if AWS CLI is installed
                  if ! command -v aws &> /dev/null; then
                    echo "Installing AWS CLI..."
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
                    rm -rf awscliv2.zip aws
                 else
                    echo "AWS CLI already installed."
                 fi
                    # Verify AWS CLI installation
                    aws --version || { echo "AWS CLI installation failed"; exit 1; }

                    # Install Docker if not found
                    if ! command -v docker &> /dev/null; then
                        echo "Installing Docker..."
                        sudo apt update
                        sudo apt install -y ca-certificates curl gnupg
                        sudo install -m 0755 -d /etc/apt/keyrings
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
                        sudo chmod a+r /etc/apt/keyrings/docker.asc
                        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                        sudo apt update
                        sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                        sudo systemctl start docker
                        sudo systemctl enable docker
                    else
                        echo "Docker is already installed."
                    fi
                '''
            }
        }

        stage('Clone Repository') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Aasminjainab', 
                                                  usernameVariable: 'GIT_USER', 
                                                  passwordVariable: 'GIT_TOKEN')]) {
                    sh '''
                        echo "Cloning repository..."
                        if [ -d "to-do-list-practise-main/.git" ]; then
                            cd to-do-list-practise-main
                            git reset --hard
                            git pull origin main
                        else
                            rm -rf to-do-list-practise-main
                            git clone https://$GIT_USER:$GIT_TOKEN@$GIT_REPO to-do-list-practise-main
                        fi
                    '''
                }
            }
        }

        stage('Run Pylint Checks') {
            steps {
                sh '''
                    if [ -f "to-do-list-practise-main/pylint.sh" ]; then
                        chmod +x to-do-list-practise-main/pylint.sh
                        cd to-do-list-practise-main
                        ./pylint.sh || exit 1
                    else
                        echo "pylint.sh not found! Skipping checks."
                    fi
                '''
            }
        }

        stage('Build and Push Docker Image to ECR') {
            steps {
                script {
                    sh '''
                        echo "Authenticating with AWS ECR..."
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                        echo "Building Docker Image..."
                        docker build -t $DOCKER_IMAGE:latest ./to-do-list-practise-main

                        echo "Tagging Image for ECR..."
                        docker tag $DOCKER_IMAGE:latest $ECR_REPO:$DOCKER_TAG

                        echo "Pushing Image to ECR..."
                        docker push $ECR_REPO:$DOCKER_TAG
                    '''
                }
            }
        }

        stage('Ensure EC2 Directory Exists') {
            steps {
                sshagent(['ubuntu']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "
                            sudo mkdir -p $APP_DIR && 
                            sudo chown ubuntu:ubuntu $APP_DIR &&
                            chmod 755 $APP_DIR
                        "
                    '''
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ubuntu']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << EOF
                        set -e

                        echo "Authenticating with AWS ECR on EC2..."
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                        echo "Pulling Latest Docker Image..."
                        docker pull $ECR_REPO:$DOCKER_TAG

                        echo "Stopping and Removing Old Containers..."
                        docker stop todo-app-container || true
                        docker rm todo-app-container || true

                        echo "Running New Container..."
                        docker run -d --restart=always -p 8000:8000 --name todo-app-container $ECR_REPO:$DOCKER_TAG
EOF
                    '''
                }
            }
        }
    }
}
