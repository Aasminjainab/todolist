pipeline {
    agent { label 'docker-agent-label' }

    environment {
        AWS_ACCOUNT_ID = '043309327282'
        AWS_REGION = 'ap-south-1'
        EC2_USER = 'ubuntu'
        EC2_HOST = '35.154.250.112'
        APP_DIR = '/home/ubuntu/todo-app/to-do-list-practise-main'
        GIT_REPO = 'https://github.com/Aasminjainab/todolist.git'
        ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/todo/app"
        DOCKER_IMAGE = 'todo-app'
        DOCKER_TAG = 'latest'
    }
stages{
stage('Setup Environment') {
    steps {
        sh '''
            echo "Checking AWS CLI installation..."
            if ! command -v aws &> /dev/null; then
                echo "AWS CLI not found. Installing..."
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip -o awscliv2.zip
                sudo ./aws/install
                rm -rf awscliv2.zip aws
            else
                echo "AWS CLI already installed. Updating..."
                sudo ./aws/install --update
            fi

            # Verify installation
            aws --version || { echo "❌ AWS CLI installation failed"; exit 1; }
        '''
    }
}

        stage('Clone Repository') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Aasminjainab', 
                                                  usernameVariable: 'GIT_USER', 
                                                  passwordVariable: 'GIT_TOKEN')]) {
                    sh '''
                        echo "Cloning repository..."
                        if [ -d "to-do-list-practise-main/.git" ]; then
                            cd to-do-list-practise-main
                            git remote set-url origin https://$GIT_USER:$GIT_TOKEN@$GIT_REPO
                            git fetch origin main
                            git reset --hard origin/main
                        else
                            rm -rf to-do-list-practise-main
                            git clone https://$GIT_USER:$GIT_TOKEN@$GIT_REPO to-do-list-practise-main
                        fi
                    '''
                }
            }
        }

        stage('Run Pylint Checks') {
            steps {
                sh '''
                    echo "Running Pylint Checks..."
                    if [ -f "to-do-list-practise-main/pylint.sh" ]; then
                        chmod +x to-do-list-practise-main/pylint.sh
                        cd to-do-list-practise-main
                        ./pylint.sh || echo "⚠️ Pylint warnings found. Check logs."
                    else
                        echo "❌ pylint.sh not found. Skipping pylint checks."
                    fi
                '''
            }
        }

        stage('Build and Push Docker Image to ECR') {
            steps {
                script {
                    sh '''
                        echo "Logging into AWS ECR..."
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                        echo "Building Docker Image..."
                        docker build -t $DOCKER_IMAGE:latest to-do-list-practise-main/

                        echo "Tagging Image for ECR..."
                        docker tag $DOCKER_IMAGE:latest $ECR_REPO:$DOCKER_TAG

                        echo "Pushing Image to ECR..."
                        docker push $ECR_REPO:$DOCKER_TAG
                    '''
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ubuntu', keyFileVariable: 'SSH_KEY')]) {
                    sh '''
                        echo "Deploying on EC2..."
                        ssh -tt -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i "$SSH_KEY" $EC2_USER@$EC2_HOST << EOF
                        set -e
                        echo 'Logging into AWS ECR on EC2...'
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                        echo 'Pulling latest image from ECR...'
                        docker pull $ECR_REPO:$DOCKER_TAG

                        echo 'Stopping and removing old container...'
                        docker stop todo-app-container || true
                        docker rm -f todo-app-container || true

                        echo 'Running new container...'
                        docker run -d --restart=always -p 8000:8000 --name todo-app-container $ECR_REPO:$DOCKER_TAG
                        EOF
                    '''
                }
            }
        }
    }
}
