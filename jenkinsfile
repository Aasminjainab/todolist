pipeline {
    agent { label 'docker-agent-label' }

    environment {
        AWS_ACCOUNT_ID = '043309327282'
        AWS_REGION = 'ap-south-1'
        EC2_USER = 'ubuntu'
        EC2_HOST = '3.110.51.85'
        APP_DIR = '/home/ubuntu/todo-app/to-do-list-practise-main'
        VENV_DIR = '/home/ubuntu/todo-app/to-do-list-practise-main/venv'
        GIT_REPO = 'https://github.com/Aasminjainab/todolist.git'
    }

    stages {
        stage('Clone Repository') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Aasminjainab', 
                                                  usernameVariable: 'GIT_USER', 
                                                  passwordVariable: 'GIT_TOKEN')]) {
                    sh '''
                        if [ -d "to-do-list-practise-main/.git" ]; then
                            cd to-do-list-practise-main
                            git reset --hard
                            git pull origin main
                        else
                            rm -rf to-do-list-practise-main
                            git clone https://$GIT_USER:$GIT_TOKEN@$GIT_REPO to-do-list-practise-main
                        fi
                    '''
                }
            }
        }

        stage('Run Pylint Checks') {
            steps {
                sh '''
                    if [ -f "to-do-list-practise-main/pylint.sh" ]; then
                        chmod +x to-do-list-practise-main/pylint.sh
                        cd to-do-list-practise-main
                        ./pylint.sh || exit 1
                    else
                        echo "pylint.sh not found! Skipping checks."
                    fi
                '''
            }
        }
        stage('Build and Push Docker Image to ECR') {
            steps {
                script {
                    def ecrRepo = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/todo-app"
                    def dockerTag = "latest"
                    
                    sh '''
                        # Authenticate Docker to AWS ECR
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

                        # Build Docker Image
                        docker build -t todo-app:latest to-do-list-practise-main

                        # Tag the Docker image for ECR
                        docker tag todo-app:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/todo-app:$dockerTag

                        # Push the Docker image to ECR
                        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/todo-app:$dockerTag
                    '''
                }
            }
        }

        stage('Ensure EC2 Directory Exists') {
            steps {
                sshagent(['ubuntu']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "
                            sudo mkdir -p $APP_DIR && 
                            sudo chown ubuntu:ubuntu $APP_DIR &&
                            chmod 755 $APP_DIR
                        "
                    '''
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ubuntu']) {
                    sh '''
                        rsync -avz -e "ssh -o StrictHostKeyChecking=no" to-do-list-practise-main/ $EC2_USER@$EC2_HOST:$APP_DIR

                        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << EOF
                        set -e
                        
                        cd "$APP_DIR"
                        sudo apt update
                        sudo apt install -y python3 python3-pip python3-venv

                        # Create virtual environment if not exists
                        if [ ! -d "$VENV_DIR" ]; then
                            echo "Creating virtual environment..."
                            python3 -m venv "$VENV_DIR"
                        fi

                        source "$VENV_DIR/bin/activate"

                        # Upgrade pip
                        echo "Upgrading pip..."
                        $VENV_DIR/bin/python -m ensurepip --default-pip
                        $VENV_DIR/bin/pip install --upgrade pip

                        # Install dependencies if requirements.txt exists
                        if [ -f "$APP_DIR/requirements.txt" ]; then
                            echo "Installing dependencies..."
                            $VENV_DIR/bin/pip install -r "$APP_DIR/requirements.txt"
                        else
                            echo "Warning: requirements.txt not found!"
                        fi

                        # Verify Django installation
                        if ! $VENV_DIR/bin/python -c "import django" 2>/dev/null; then
                            echo "Error: Django is not installed! Exiting..."
                            exit 1
                        fi

                        # Run Django commands only if manage.py exists
                        if [ -f "$APP_DIR/manage.py" ]; then
                            echo "Running migrations..."
                            $VENV_DIR/bin/python manage.py migrate

                            echo "Collecting static files..."
                            $VENV_DIR/bin/python manage.py collectstatic --noinput

                            echo "Killing any process on port 8000..."
                            fuser -k 8000/tcp || true

                            echo "Starting Django server..."
                            nohup $VENV_DIR/bin/python manage.py runserver 0.0.0.0:8000 > app.log 2>&1 &
                        else
                            echo "Error: manage.py not found!"
                            exit 1
                        fi
EOF
                    '''
                }
            }
        }
    }
}
