pipeline {
    agent { label 'docker-agent-label' }

    environment {
        AWS_ACCOUNT_ID = '043309327282'
        AWS_REGION = 'ap-south-1'
        EC2_USER = 'ubuntu'
        EC2_HOST = '35.154.250.112'
        APP_DIR = '/home/ubuntu/todolist'  // ✅ Fixed path
        GIT_REPO = 'https://github.com/Aasminjainab/todolist.git'
        ECR_REPO = '043309327282.dkr.ecr.ap-south-1.amazonaws.com/my-todo'
        DOCKER_IMAGE = 'todo-app'
        DOCKER_TAG = 'latest'
    }


    stages {
        stage('Clone TO-DO Repository') {
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                    echo "Checking if repository already exists..."
                    if [ -d "todolist/.git" ]; then
                        echo "Repository exists. Pulling latest changes..."
                        cd todolist
                        git remote set-url origin https://$GITHUB_TOKEN@github.com/Aasminjainab/todolist.git
                        git fetch origin main
                        git reset --hard origin/main
                        git pull origin main
                    else
                        echo "Cloning TO-DO LIST repository..."
                        git clone https://$GITHUB_TOKEN@github.com/Aasminjainab/todolist.git todolist
                    fi
                    '''
                }
            }

        }


        stage('Run Pylint Checks') {
            steps {
                sh '''
                echo "Running Pylint Checks..."
                if [ -f todolist/pylint.sh ]; then
                    chmod +x todolist/pylint.sh
                    ./todolist/pylint.sh | tee pylint.log || echo "⚠️ Pylint warnings found, review pylint.log."
                else
                    echo "❌ pylint.sh not found. Skipping pylint checks."
                fi
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                echo "Building Docker Image..."
                cd todolist  # ✅ Corrected directory
                docker build -t $DOCKER_IMAGE:$DOCKER_TAG -f Dockerfile .  # ✅ Ensure Dockerfile is here
                docker tag $DOCKER_IMAGE:$DOCKER_TAG $ECR_REPO:$DOCKER_TAG
                '''
            }
        }

        stage('Login to AWS ECR') {
            steps {
                withCredentials([string(credentialsId: 'aws-ecrtoken', variable: 'AWS_ECR_PASSWORD')]) {
                    sh '''
                    echo "Logging into AWS ECR..."
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                    '''
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                sh '''
                echo "Pushing Docker Image to AWS ECR..."
                docker push $ECR_REPO:$DOCKER_TAG
                '''
            }
        }



        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                    sh '''
                    echo "Deploying on EC2..."
                    ssh -tt -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST bash -c "
                    set -e
                    echo 'Checking for existing container...'
                    docker ps -q --filter 'name=todo-container' | grep -q . && docker stop todo-container && docker rm -f todo-container || echo 'No running container found.'

                    echo 'Checking for processes using port 8000...'
                    sudo lsof -ti:8000 | xargs -r sudo kill -9 || echo 'No process found on port 8000.'

                    echo 'Pulling latest image from ECR...'
                    docker pull $ECR_REPO:$DOCKER_TAG

                    echo 'Running new container...'
                    docker run -d --restart=always -p 8000:8000 --name todo-container $ECR_REPO:$DOCKER_TAG
                    "
                    '''
                }
            }
        }
    }
}
