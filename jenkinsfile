pipeline {
    agent { label 'docker-agent-label' }

    environment {
        AWS_ACCOUNT_ID = '043309327282'
        AWS_REGION = 'ap-south-1'
        EC2_USER = 'ubuntu'
        EC2_HOST = '3.110.51.85'
        APP_DIR = '/home/ubuntu/todo-app/to-do-list-practise-main'
        PYTHON_BIN = '/usr/bin/python3' 
        VENV_DIR = '/home/ubuntu/todo-app/venv' 
    }

    stages {
        stage('Clone Repository') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Aasminjainab', 
                                                    usernameVariable: 'GIT_USER', 
                                                    passwordVariable: 'GIT_TOKEN')]) {
                    sh '''
                        echo "Checking if repository already exists..."
                        if [ -d "to-do-list-practise-main/.git" ]; then
                            echo "Repository exists. Cleaning up and pulling latest changes..."
                            cd to-do-list-practise-main
                            git reset --hard
                            git pull origin main
                        else
                            echo "Cloning repository..."
                            rm -rf to-do-list-practise-main
                            git clone https://$GIT_USER:$GIT_TOKEN@github.com/Aasminjainab/todolist.git to-do-list-practise-main
                        fi
                    '''
                }
            }
        }

        stage('Run Pylint Checks') {
            steps {
                sh '''
                    echo "Running Pylint Checks..."
                    if [ -f "to-do-list-practise-main/pylint.sh" ]; then
                        chmod +x to-do-list-practise-main/pylint.sh
                        cd to-do-list-practise-main
                        ./pylint.sh || { echo "Pylint checks failed!"; exit 1; }
                    else
                        echo "Error: pylint.sh not found!"
                        exit 1
                    fi
                '''
            }
        }

        stage('Ensure Application Directory on EC2') {
            steps {
                sshagent(['ubuntu']) {
                    sh '''
                        echo "Ensuring application directory exists on EC2..."
                        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "sudo mkdir -p $APP_DIR && sudo chown ubuntu:ubuntu $APP_DIR && chmod 755 $APP_DIR"
                    '''
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ubuntu']) {
                    sh '''
                        echo "Transferring application files to EC2..."
                        rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" to-do-list-practise-main/ $EC2_USER@$EC2_HOST:$APP_DIR

                        echo "Deploying Django application on EC2..."
                        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << 'EOF'
                        set -e
                        APP_DIR=/home/ubuntu/todo-app/to-do-list-practise-main
                        VENV_DIR=/home/ubuntu/todo-app/venv
                        echo "APP_DIR: $APP_DIR"
                        echo "VENV_DIR: $VENV_DIR"
                        cd $APP_DIR

                        # Ensure Python and pip are installed
                        sudo apt update
                        sudo apt install -y python3 python3-pip python3-venv

                        # Set up virtual environment if not exists
                        if [ ! -d "$VENV_DIR" ]; then
                            echo "Creating virtual environment..."
                            python3 -m venv "$VENV_DIR"
                        fi

                        # Activate virtual environment and verify
                        . "$VENV_DIR/bin/activate" || source "$VENV_DIR/bin/activate"
                        echo "Using Python: $(which python)"
                        echo "Using pip: $(which pip)"

                        # Upgrade pip
                        pip install --upgrade pip

                        # Install dependencies if requirements.txt exists
                        if [ -f requirements.txt ]; then
                            echo "Installing dependencies from requirements.txt..."
                            pip install -r requirements.txt
                        else
                            echo "Warning: requirements.txt not found! Skipping dependency installation."
                        fi

                        # Ensure manage.py exists
                        if [ -f manage.py ]; then
                            echo "Found manage.py, running migrations..."
                            python manage.py migrate
                            echo "Collecting static files..."
                            python manage.py collectstatic --noinput

                            echo "Restarting Django server if already running..."
                            fuser -k 8000/tcp || echo "No process running on port 8000"

                            echo "Starting Django server..."
                            nohup python manage.py runserver 0.0.0.0:8000 > app.log 2>&1 &
                        else
                            echo "Error: manage.py not found. Check project structure."
                            exit 1
                        fi
                        EOF
                        echo "Deployment Successful!"
                    '''
                }
            }
        }
    }
}
